# This workflow builds and deploys the 'latest' documentation when code is pushed to main.

name: Build and Deploy Latest Docs

on:
  push:
    branches:
      - main
  
  # Allow manual triggering with option to rebuild all
  workflow_dispatch:
    inputs:
      rebuild_all:
        description: 'Force rebuild all packages'
        required: false
        type: boolean
        default: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python with uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: '3.11'
          enable-cache: true

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-docs.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install build dependencies
        run: |
            uv pip install -r requirements-docs.txt
            uv pip install requests packaging setuptools
            sudo apt-get install graphviz

      - name: Build documentation for all packages
        run: |
          # Check if this is triggered by packages.txt change or manual push
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
          
          echo "Changed files: $CHANGED_FILES"
          
          if [[ "$CHANGED_FILES" == *"packages.txt"* ]]; then
            echo "packages.txt changed - rebuilding all packages"
            BUILD_ALL=true
          elif [[ "${{ github.event.inputs.rebuild_all }}" == "true" ]]; then
            echo "Manual rebuild requested - rebuilding all packages"
            BUILD_ALL=true
          elif [[ -z "$CHANGED_FILES" ]]; then
            echo "No previous commit found (probably initial commit) - rebuilding all packages"
            BUILD_ALL=true
          else
            echo "No packages.txt changes - checking for package-specific changes"
            BUILD_ALL=false
          fi
          
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Trim leading/trailing whitespace and skip comments/empty lines
            line=$(echo "$line" | xargs)
            [[ "$line" =~ ^# ]] || [[ -z "$line" ]] && continue
            
            # Find the last comma to split package spec from version
            # This handles packages with extras like: iqm-pulla[qiskit,qir],10.1.0
            last_comma_pos=${line%,*}
            if [ "$last_comma_pos" = "$line" ]; then
              # No comma found, use entire line as package spec
              package_spec="$line"
            else
              # Extract package spec (everything before the last comma)
              package_spec="$last_comma_pos"
            fi
            
            # Extract the base name (e.g., 'iqm-client' from 'iqm-client[extras]')
            base_name=${package_spec%%\[*}
            
            # Check if we should build this package
            SHOULD_BUILD=false
            if [ "$BUILD_ALL" = true ]; then
              SHOULD_BUILD=true
            elif [[ "$CHANGED_FILES" == *"$base_name"* ]]; then
              echo "Package $base_name has changes - rebuilding"
              SHOULD_BUILD=true
            fi
            
            if [ "$SHOULD_BUILD" = true ]; then
              echo "Building docs for package: $base_name (latest)"
              bash build-docs.sh "$base_name" "latest" "$package_spec"
            else
              echo "Skipping $base_name - no changes detected"
            fi
          done < packages.txt

      - name: Generate landing page
        run: python generate_index.py _site

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: _site
          clean: false
